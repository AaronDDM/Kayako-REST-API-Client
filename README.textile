h1. Kayako REST API Client

"Kayako Resolve":http://www.kayako.com/products/resolve/ is a comprehensive helpdesk and ticket management solution. It exposes "REST API":http://wiki.kayako.com/display/DEV/REST+API which can be used for example to create new tickets from external systems. To facilitate the use of this API I created a client written in PHP.

h1. Prerequisities

h2. PHP

Client requires PHP >= 5.3.0 (beacause late static binding is used) with enabled support for: libXML, cURL, hash, fileinfo and date/time.

h2. Kayako

I had some problems in Kayako prior to version 4_01_204, so it's better to upgrade at least to this version.

While implementing this client I came across few inconsitencies and missing data in Kayako API, so I introduced following changes to the source code of Kayako:
* order ticket posts and notes by their creation date (older first)
* include identifier in ticket note and ticket time track
* include ticket identifier in ticket note and ticket time track
* include user identifier in ticket user note
* include user organization identifier in ticket user organization note
* change "ticketpostid" element of ticket to "id" (leave "ticketpostid" for backward compatibility)
* include ticket identifier in ticket post

*IMPORTANT*
Without the patch it won't be possible to delete ticket notes and ticket posts. If it's ok for you, than you don't need to apply the patch.

In order to take advantage of these changes you must patch your Kayako installation. Patches starting from version 4_01_204 of Kayako Fusion are included in "patch" directory. To apply the patch copy it to root directory of Kayako installation and run
<pre>
patch -p0 < patch-4_01_204.diff
</pre>

h1. Examples

Example is also provided with source in example.php file.

h2. Initialising the client.

<pre>
require_once("kyIncludes.php");

//client initialization
kyBase::init("http://mykayako.example.com/api/index.php", "<API key>", "<Secret key>");
</pre>

h2. Setting defaults for ticket creation

This step is optional. If the client will be used to create tickets it's recommended to set default status, priority and type of new tickets:

<pre>
$default_status_id = 1;
$default_priority_id = 1;
$default_type_id = 1;
kyTicket::setDefaults($default_status_id, $default_priority_id, $default_type_id);
</pre>

*IMPORTANT*
Status, priority and type identifiers may be different in your installation. In order to discover right identifiers fetch and examine all objects to choose the proper ones:

<pre>
var_dump(kyTicketStatus::getAll());
var_dump(kyTicketPriority::getAll());
var_dump(kyTicketType::getAll());
</pre>

h2. Preparing objects

h3. Loading department

To create a ticket you will have to load a proper department providing its identifier. To find out the identifier fetch all departments and find the proper one:
 
<pre>
var_dump(kyDeparment::getAll());
</pre>

*IMPORTANT*
Department should be Public and its module should be set to Tickets.

We will assume that our department has identifier = 1. Let's fetch the object:

<pre>
$department_id = 1;
$department = kyDepartment::get($department_id);
</pre>

h3. Loading creator

Also you need the creator of ticket. It can be ordinary user or staff user. Let's assume that we want to create ticket as ordinary user. Unfortunately in Kayako vrsion 4_01_204 you can't search users by providing an email address. So to find out the user identifier fetch all users and find the proper one:

<pre>
var_dump(kyUser::getAll());
</pre>

*IMPORTANT*
User must have the right to create tickets in department loaded in previous step.

We will assume that our user has identifier = 1. Let's fetch the object:

<pre>
$user_id = 1;
$user = kyUser::get($user_id);
</pre>

h3. Loading ticket owner 

Optionally you can assign the ticket to some staff user. 

<pre>
var_dump(kyStaff::getAll());
</pre>

We will assume that our staff user has identifier = 1. Let's fetch the object:

<pre>
$staff_id = 1;
$staff = kyStaff::get($staff_id);
</pre>

h2. Creating a ticket.

Now we are ready to create some ticket. We assign the ticket to the staff user in the same step (but it's not required).

<pre>
$new_ticket = $user->newTicket($department,
'Lorem ipsum dolor sit amet, consectetur adipiscing elit.
Aliquam placerat cursus augue sed adipiscing. Proin viverra egestas nulla et sollicitudin.',
	'Lorem ipsum 1')->setOwnerStaff($staff)->create();
</pre>

The ticket should be created. The $new_ticket object holds all the information about newly created ticket. You can for example get its display identifer so you can present it to the user. 

<pre>
print "The ticket was created and its ID is: ".$new_ticket->getDisplayId();
</pre>

Usually that's everything what will be needed in casual cases, when you simply want to create a ticket. But we can do some more...

h2. Changing the ticket

Assume we want to change the status of newly created ticket.

<pre>
$new_ticket->setStatusId(5)->update();
</pre>

h2. Adding a ticket post (as staff).

The owner of ticket (staff user assigned) apparently doesn't understand the rubbish we've sent in ticket contents so let's ask politely for clarification;) We are adding new ticket post as ticket owner.

<pre>
$new_ticket_post = $new_ticket->newPost($new_ticket->getOwnerStaff(), 'What??')->create();
</pre>

h2. Adding a ticket post with attachments (as user).

Let's create some new post as user and attach some file to it.

*IMPORTANT*
Change the path of file to the existing one.

<pre>
//add new post
$new_ticket_post = $new_ticket->newPost($new_ticket->getUser(), 'Sorry, I forgot the attachment...')->create();

//add attachment to the post
$new_ticket_attachment = $new_ticket_post->newAttachmentFromFile('/path/to/file.pdf')->create();
</pre>

h2. Searching for tickets (using helper).

If you want to search for tickets you can do it two ways. 

h3. Search using helper

Search using helper with method chaining.

<pre>
$tickets = kySearchTicket::createNew()->addDepartmentId(1)->addTicketStatusId(2)->addTicketStatusId(3)->addOwnerStaffId(4)->addUser(3)->search();
</pre>

h3. Search using getAll.

And the same with getAll method.

<pre>
$tickets = kyTicket::getAll(array(1), array(2, 3), array(4), array(3));
</pre>

h1. How to contribute

If you want to contribute an enhancement or a fix:

# Fork the project on github.
# Make your changes (please try to preserve used coding conventions and code formatting). 
# Test your changes.
# Commit the changes without making changes to files that aren't related to your enhancement or fix.
# Send a pull request.

h1. (Un)license

This is free and unencumbered software released into the public domain.

Anyone is free to copy, modify, publish, use, compile, sell, or distribute this software, either in source code form or as a compiled binary, for any purpose, commercial or non-commercial, and by any means.

In jurisdictions that recognize copyright laws, the author or authors of this software dedicate any and all copyright interest in the software to the public domain. We make this dedication for the benefit of the public at large and to the detriment of our heirs and successors. We intend this dedication to be an overt act of relinquishment in perpetuity of all present and future rights to this software under copyright law.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

For more information, please refer to <http://unlicense.org/>